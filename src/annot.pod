#
# This file is in Perl POD syntax.
#

=head1 NAME

annot -- lookup compiler-generated annotations in OCaml source code

=head1 SYNOPSIS

B<annot> [B<-n>] [B<-r>] B<-type> I<line> I<column> [I<file.annot>]

B<annot> B<-dump> [I<file.annot>]

B<annot> B<-help>

B<annot> B<-version>

=head1 DESCRIPTION

B<Annot> looks up annotations for identifiers in an OCaml source file.
Such annotations are produced by the OCaml compiler ocamlc(1) and stored in
an *.annot file, which is read by B<annot> either from standard input, or
from I<file.annot>.  For looking up the annotation for an identifier, the
identifier's source code position as I<line> and I<column> is passed to
B<annot>. It is typically invoked from an editor to lookup the type of an
identifier under the cursor.

=head1 OPTIONS

=over 4

=item B<-type> I<line> I<column>

Lookup the type annotation for position I<line> and I<column> and emit
it to standard output.

=item B<-dump>

Dump all annotations to stdout. This is mostly used for debugging.

=item B<-n>

Don't print a newline after emitting an annotation to standard output.
This is sometimes useful when showing the output inside an editor.

=item B<-r>

When emitting an annotation, include the source code range for which the
annotation is intended. This could be used to highlight it in an editor.

=item B<-h>

Emit short a help message to stdout and exit with code 0.

=item B<-version>

Emit the version of B<annot> to stdout and exit with code 0.

=back

=head1 FILE LOOKUP

B<Annot> reads from stdin or from the file provided as argument. If
the file name provided as argument is an I<absolute> file path, it is taken
as is and B<annot> fails if it doesn't exist. If the file path provided is
I<relative>, B<annot> searches for it before it fails: B<annot> prefixes
the relative path in turn with each of the following directory names:

    . 
    _build 
    ../_build

For example, if F<src/main.annot> is provided as an argument, B<annot> will
try F<./src/main.annot>, F<_build/src/main.annot> and
F<../_build/src/main.annot> before it fails should none of these exist.

=head1 AUTHORS AND CONTRIBUTORS

Please send feedback, bug reports, and experience reports to the author:

Christian Lindig <lindig@gmail.com>: original author; refactored the build
system to use OCamlbuild.

Anil Madhavapeddy <anil@recoil.org>,  http://anil.recoil.org: moved the
project to GitHub, exposed C<realpath()> through C<custom_unix_stubs.c>. 

=head1 COPYRIGHT

Copyright (c) 2006, 2013 Christian Lindig <lindig@gmail.com>. All
rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

=over

=item 1. 

Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.

=item 2. 

Redistributions in binary form must reproduce the above
copyright notice, this list of conditions and the following
disclaimer in the documentation and/or other materials provided
with the distribution.

=item 3.

The names of the contributors may not be used to endorse or promote
products derived from this software without specific prior written
permission.


=back

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

=head1 SEE ALSO 

ocaml(1), ocamlc(1)
